@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using BlazorBasicAPI.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>



<h1>Weather forecast</h1>

<ChosenURL URL ="@URL"/>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Active</th>
                <th>Age</th>
                <th>Name</th>
                <th>Description</th>
                <th>Url</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Active</td>
                    <td>@forecast.Age</td>
                    <td>@forecast.Name</td>
                    <td>@forecast.Description</td>
                    <td>@forecast.Url</td>
                    <td><button class="btn btn-primary" @onclick="(() => BlueButton(forecast.Url))">Show URL in component</button></td>
                    <td><button class="btn" style="background-color: #de5246;" @onclick="(() => RedButton(forecast.Url))">Open URL in browser</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<script>
    function openWindow(url) {
        window.open(url);
    }
</script>

@code {
    private IEnumerable<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        forecasts = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>("https://restpublic.junoeuro.dk/service1.svc/getListOfPersons/");
    }

    public string URL { get; set; } = "No URL chosen";
    public async Task BlueButton(string url)
    {
        URL = url;
    }

    string Url = "https://";
    public async Task RedButton(string url)
    {
        await JSRuntime.InvokeVoidAsync("openWindow", Url + url);
    }
}


